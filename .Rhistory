HistoTest_Ex1 <- function(n, p, mu , Sigma, WhichMu, WhichSig){
dat <- c()
for (i in 1:1000){
if (i %% 50 == 0){
print(i)
}
Data_matrix <- matrix(0, nrow = n, ncol = p)
for (i in 1:n){
#set.seed(i)          #Set seed for reproducibility
Data_matrix[i,] <- t(mu + t(chol(Sigma)) %*% rnorm(p, 0, 1))
}
for (i in 1:n){
#matrix with the vector Zi. Each row is a vector of p components
Data_matrix[i,] <- Data_matrix[i,] / norm(Data_matrix[i,], type= '2')
}
Tn <- 0
for (i in 2:n){
for (j in 1:(i-1)){
Tn <- Tn + Data_matrix[i,] %*% Data_matrix[j,]
}
}
Z_star <- 0
for (i in 1:n){
Z_star <- Z_star + Data_matrix[i,]
}
Z_star <- Z_star / (n - 2)
Matrix_Zj_ZjT <- matrix(0, nrow = p, ncol = p)
for (i in 1:n){
Matrix_Zj_ZjT <- Matrix_Zj_ZjT + Data_matrix[i,] %*% t(Data_matrix[i,])
}
Tr_B <- -n/(n - 2)**2 + ((n-1)/(n*(n-2)**2))* tr(Matrix_Zj_ZjT %*% Matrix_Zj_ZjT) +
((1-2*n)/(n*(n-1))) * Z_star %*% Matrix_Zj_ZjT %*% Z_star +
(2/n) * norm(Z_star, type = '2')**2 + (((n-2)**2)/(n*(n-1))) * norm(Z_star, type = '2')**4
Tn_normalized <- Tn/((0.5*n*(n-1)*Tr_B)**0.5)
dat <- append(dat, Tn_normalized)
}
print(mean(dat))
print(sd(dat))
title <- sprintf("Case 1. n=%d p=%d mu%d Sigma%d", n, p, WhichMu, WhichSig)
h <- hist(dat,
breaks = 20,
prob = FALSE
)
h$counts <- h$counts / sum(h$counts)
plot(h,main= title, freq=TRUE,xlab="Tn", ylab="Relative Frequency", ylim=c(0,0.5), xlim = c(-5,5))
#m<-mean(dat)
#std<-sqrt(var(dat))
curve(dnorm(x, 0, 1),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
}
HistoTest_Ex1(28, 200, mu0, Sigma1,0,1)
HistoTest_Ex1(28, 100, mu0, Sigma1,0,1)
HistoTest_Ex1 <- function(n, p, mu , Sigma, WhichMu, WhichSig){
dat <- c()
for (i in 1:1000){
if (i %% 50 == 0){
print(i)
}
Data_matrix <- matrix(0, nrow = n, ncol = p)
for (i in 1:n){
#set.seed(i)          #Set seed for reproducibility
Data_matrix[i,] <- t(mu + t(chol(Sigma)) %*% rnorm(p, 0, 1))
}
for (i in 1:n){
#matrix with the vector Zi. Each row is a vector of p components
Data_matrix[i,] <- Data_matrix[i,] / norm(Data_matrix[i,], type= '2')
}
Tn <- 0
for (i in 2:n){
for (j in 1:(i-1)){
Tn <- Tn + Data_matrix[i,] %*% Data_matrix[j,]
}
}
Z_star <- 0
for (i in 1:n){
Z_star <- Z_star + Data_matrix[i,]
}
Z_star <- Z_star / (n - 2)
Matrix_Zj_ZjT <- matrix(0, nrow = p, ncol = p)
for (i in 1:n){
Matrix_Zj_ZjT <- Matrix_Zj_ZjT + Data_matrix[i,] %*% t(Data_matrix[i,])
}
Tr_B <- -n/(n - 2)**2 + ((n-1)/(n*(n-2)**2))* tr(Matrix_Zj_ZjT %*% Matrix_Zj_ZjT) +
((1-2*n)/(n*(n-1))) * Z_star %*% Matrix_Zj_ZjT %*% Z_star +
(2/n) * norm(Z_star, type = '2')**2 + (((n-2)**2)/(n*(n-1))) * norm(Z_star, type = '2')**4
Tn_normalized <- Tn/((0.5*n*(n-1)*Tr_B)**0.5)
dat <- append(dat, Tn_normalized)
}
print(mean(dat))
print(sd(dat))
title <- sprintf("Case 1. n=%d p=%d mu%d Sigma%d", n, p, WhichMu, WhichSig)
h <- hist(dat,
breaks = 20,
prob = FALSE
)
h$counts <- h$counts / sum(h$counts)
plot(h,main= title, freq=TRUE,xlab="Tn", ylab="Relative Frequency", ylim=c(0,0.5), xlim = c(-5,5))
#m<-mean(dat)
#std<-sqrt(var(dat))
curve(dnorm(x, 0, 1),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
}
HistoTest_Ex1(28, 100, mu0, Sigma2,0,1)
HistoTest_Ex1 <- function(n, p, mu , Sigma, WhichMu, WhichSig){
dat <- c()
for (i in 1:1000){
if (i %% 50 == 0){
print(i)
}
Data_matrix <- matrix(0, nrow = n, ncol = p)
for (i in 1:n){
#set.seed(i)          #Set seed for reproducibility
Data_matrix[i,] <- t(mu + t(chol(Sigma)) %*% rnorm(p, 0, 1))
}
for (i in 1:n){
#matrix with the vector Zi. Each row is a vector of p components
Data_matrix[i,] <- Data_matrix[i,] / norm(Data_matrix[i,], type= '2')
}
Tn <- 0
for (i in 2:n){
for (j in 1:(i-1)){
Tn <- Tn + Data_matrix[i,] %*% Data_matrix[j,]
}
}
Z_star <- 0
for (i in 1:n){
Z_star <- Z_star + Data_matrix[i,]
}
Z_star <- Z_star / (n - 2)
Matrix_Zj_ZjT <- matrix(0, nrow = p, ncol = p)
for (i in 1:n){
Matrix_Zj_ZjT <- Matrix_Zj_ZjT + Data_matrix[i,] %*% t(Data_matrix[i,])
}
Tr_B <- -n/(n - 2)**2 + ((n-1)/(n*(n-2)**2))* tr(Matrix_Zj_ZjT %*% Matrix_Zj_ZjT) +
((1-2*n)/(n*(n-1))) * Z_star %*% Matrix_Zj_ZjT %*% Z_star +
(2/n) * norm(Z_star, type = '2')**2 + (((n-2)**2)/(n*(n-1))) * norm(Z_star, type = '2')**4
Tn_normalized <- Tn/((0.5*n*(n-1)*Tr_B)**0.5)
dat <- append(dat, Tn_normalized)
}
print(mean(dat))
print(sd(dat))
}
HistoTest_Ex1(28, 100, mu0, Sigma2,0,1)
# PART generate data and Tn test it ----
#Because create 1000 (check article 3.1) data files for each cases will take more times
#this section is a first try to generate 1000 data set and create an histogram
#of the Test function. To verify the disribution
p <- 500                                #dimension vector (multiple of 3)
mu0 <- rep(0, p)
mu1 <- rep(0.25, p)
mu2 <- c(rep(0, p %/% 3), rep(0.25, p %/% 3), rep(-0.25, p %/% 3))
Sigma1 <- 'diag<-'(matrix(0.2, p, p), 1)
Sigma2 <- matrix(0 , nrow = p, ncol = p)
for (i in 1:p){
for (j in 1:p){
Sigma2[i, j] <- 0.8 ** abs(i - j)
}
}
D <- matrix(0 , nrow = p, ncol = p)
for (i in 1:p){
D[i, i] <- 2 + (p - i + 1) / p
}
R <- matrix(0 , nrow = p, ncol = p)
for (i in 1:p){
for (j in 1:p){
R[i, j] <- (-1) ** (i + j) * (0.2) ** (abs(i - j) ** (0.1))
}
}
Sigma3 <- D %*% R %*% D
tr <- function (m){
total_sum <- 0
if(is.matrix(m))
{
row_count <- nrow(m)
col_count <- ncol(m)
if(row_count == col_count)
{
total_sum <-sum(diag(m))
total_sum
}
else
{
message ('Matrix is not square')
}
}
else
{
message( 'Object is not a matrix')
}
}
HistoTest_Ex1 <- function(n, p, mu , Sigma, WhichMu, WhichSig){
dat <- c()
for (i in 1:1000){
if (i %% 50 == 0){
print(i)
}
Data_matrix <- matrix(0, nrow = n, ncol = p)
for (i in 1:n){
#set.seed(i)          #Set seed for reproducibility
Data_matrix[i,] <- t(mu + t(chol(Sigma)) %*% rnorm(p, 0, 1))
}
for (i in 1:n){
#matrix with the vector Zi. Each row is a vector of p components
Data_matrix[i,] <- Data_matrix[i,] / norm(Data_matrix[i,], type= '2')
}
Tn <- 0
for (i in 2:n){
for (j in 1:(i-1)){
Tn <- Tn + Data_matrix[i,] %*% Data_matrix[j,]
}
}
Z_star <- 0
for (i in 1:n){
Z_star <- Z_star + Data_matrix[i,]
}
Z_star <- Z_star / (n - 2)
Matrix_Zj_ZjT <- matrix(0, nrow = p, ncol = p)
for (i in 1:n){
Matrix_Zj_ZjT <- Matrix_Zj_ZjT + Data_matrix[i,] %*% t(Data_matrix[i,])
}
Tr_B <- -n/(n - 2)**2 + ((n-1)/(n*(n-2)**2))* tr(Matrix_Zj_ZjT %*% Matrix_Zj_ZjT) +
((1-2*n)/(n*(n-1))) * Z_star %*% Matrix_Zj_ZjT %*% Z_star +
(2/n) * norm(Z_star, type = '2')**2 + (((n-2)**2)/(n*(n-1))) * norm(Z_star, type = '2')**4
Tn_normalized <- Tn/((0.5*n*(n-1)*Tr_B)**0.5)
dat <- append(dat, Tn_normalized)
}
print(mean(dat))
print(sd(dat))
}
HistoTest_Ex1(20, 500, mu0, Sigma2,0,1)
HistoTest_Ex1(20, 100, mu0, Sigma2,0,1)
# PART generate data and Tn test it ----
#Because create 1000 (check article 3.1) data files for each cases will take more times
#this section is a first try to generate 1000 data set and create an histogram
#of the Test function. To verify the disribution
p <- 100                                #dimension vector (multiple of 3)
mu0 <- rep(0, p)
mu1 <- rep(0.25, p)
mu2 <- c(rep(0, p %/% 3), rep(0.25, p %/% 3), rep(-0.25, p %/% 3))
Sigma1 <- 'diag<-'(matrix(0.2, p, p), 1)
Sigma2 <- matrix(0 , nrow = p, ncol = p)
for (i in 1:p){
for (j in 1:p){
Sigma2[i, j] <- 0.8 ** abs(i - j)
}
}
D <- matrix(0 , nrow = p, ncol = p)
for (i in 1:p){
D[i, i] <- 2 + (p - i + 1) / p
}
R <- matrix(0 , nrow = p, ncol = p)
for (i in 1:p){
for (j in 1:p){
R[i, j] <- (-1) ** (i + j) * (0.2) ** (abs(i - j) ** (0.1))
}
}
Sigma3 <- D %*% R %*% D
tr <- function (m){
total_sum <- 0
if(is.matrix(m))
{
row_count <- nrow(m)
col_count <- ncol(m)
if(row_count == col_count)
{
total_sum <-sum(diag(m))
total_sum
}
else
{
message ('Matrix is not square')
}
}
else
{
message( 'Object is not a matrix')
}
}
HistoTest_Ex1 <- function(n, p, mu , Sigma, WhichMu, WhichSig){
dat <- c()
for (i in 1:1000){
if (i %% 50 == 0){
print(i)
}
Data_matrix <- matrix(0, nrow = n, ncol = p)
for (i in 1:n){
#set.seed(i)          #Set seed for reproducibility
Data_matrix[i,] <- t(mu + t(chol(Sigma)) %*% rnorm(p, 0, 1))
}
for (i in 1:n){
#matrix with the vector Zi. Each row is a vector of p components
Data_matrix[i,] <- Data_matrix[i,] / norm(Data_matrix[i,], type= '2')
}
Tn <- 0
for (i in 2:n){
for (j in 1:(i-1)){
Tn <- Tn + Data_matrix[i,] %*% Data_matrix[j,]
}
}
Z_star <- 0
for (i in 1:n){
Z_star <- Z_star + Data_matrix[i,]
}
Z_star <- Z_star / (n - 2)
Matrix_Zj_ZjT <- matrix(0, nrow = p, ncol = p)
for (i in 1:n){
Matrix_Zj_ZjT <- Matrix_Zj_ZjT + Data_matrix[i,] %*% t(Data_matrix[i,])
}
Tr_B <- -n/(n - 2)**2 + ((n-1)/(n*(n-2)**2))* tr(Matrix_Zj_ZjT %*% Matrix_Zj_ZjT) +
((1-2*n)/(n*(n-1))) * Z_star %*% Matrix_Zj_ZjT %*% Z_star +
(2/n) * norm(Z_star, type = '2')**2 + (((n-2)**2)/(n*(n-1))) * norm(Z_star, type = '2')**4
Tn_normalized <- Tn/((0.5*n*(n-1)*Tr_B)**0.5)
dat <- append(dat, Tn_normalized)
}
print(mean(dat))
print(sd(dat))
}
HistoTest_Ex1(20, 100, mu0, Sigma2,0,1)
x <- seq(5, 15, length=1000)
y <- dnorm(x, mean=-0.02905539, sd=-0.02905539)
plot(x, y, type="l", lwd=1)
x <- seq(5, 15, length=1000)
y <- dnorm(x, mean=-0.02905539, sd=-0.02905539)
plot(x, y, type="l", lwd=1, ylim=c(0,0.5))
x <- seq(5, 15, length=1000)
y <- dnorm(x, mean=-0.02905539, sd=-0.02905539)
plot(x, y, type="l", lwd=1, ylim=c(0,5))
x<-rnorm(100000,mean=-0.02905539, sd=1.038987)
hist(x,breaks=150,xlim=c(0,20),freq=FALSE)
x<-rnorm(100000,mean=-0.02905539, sd=1.038987)
y<-rnorm(100000,mean=-0, sd=1)
hist(x,breaks=150,xlim=c(-5,5),freq=FALSE)
hist(y,breaks=150,xlim=c(-5,5),freq=FALSE,col = 'blue')
x<-rnorm(100000,mean=-0.02905539, sd=1.038987)
y<-rnorm(100000,mean=-0, sd=1)
p1<- hist(x,breaks=150,freq=FALSE)
p2<- hist(y,breaks=150,freq=FALSE)
plot( p1, col=rgb(0,0,1,1/4), xlim=c(0,10))  # first histogram
plot( p2, col=rgb(1,0,0,1/4), xlim=c(0,10), add=T)  # second
x<-rnorm(100000,mean=-0.02905539, sd=1.038987)
y<-rnorm(100000,mean=-0, sd=1)
p1<- hist(x,breaks=150,freq=FALSE)
p2<- hist(y,breaks=150,freq=FALSE)
plot( p1, col=rgb(0,0,1,1/4), xlim=c(-5,5))  # first histogram
plot( p2, col=rgb(1,0,0,1/4), xlim=c(-5,5), add=T)  # second
x<-dnorm(100000,mean=-0.02905539, sd=1.038987)
y<-dnorm(100000,mean=-0, sd=1)
p1<- hist(x,breaks=150,freq=FALSE)
p2<- hist(y,breaks=150,freq=FALSE)
plot( p1, col=rgb(0,0,1,1/4), xlim=c(-5,5))  # first histogram
plot( p2, col=rgb(1,0,0,1/4), xlim=c(-5,5), add=T)  # second
x<-rnorm(100000,mean=-0.02905539, sd=1.038987)
y<-rnorm(100000,mean=-0, sd=1)
p1<- hist(x,breaks=150,freq=FALSE)
p2<- hist(y,breaks=150,freq=FALSE)
plot( p1, col=rgb(0,0,1,1/4), xlim=c(-5,5))  # first histogram
plot( p2, col=rgb(1,0,0,1/4), xlim=c(-5,5), add=T)  # second
x<-rnorm(100000,mean=-0.02905539, sd=1.038987)
y<-rnorm(100000,mean=-0, sd=1)
p1<- hist(x,breaks=150,freq=FALSE,col.fill='white')
p2<- hist(y,breaks=150,freq=FALSE)
plot( p1, col=rgb(0,0,1,1/4), xlim=c(-5,5))  # first histogram
plot( p2, col=rgb(1,0,0,1/4), xlim=c(-5,5), add=T)  # second
x<-rnorm(100000,mean=-0.02905539, sd=1.038987)
y<-rnorm(100000,mean=-0, sd=1)
p1<- hist(x,breaks=150,freq=FALSE,col.fill='white')
p2<- hist(y,breaks=150,freq=FALSE)
plot( p1, col=rgb(0,0,1,1/4), xlim=c(-5,5),col.fill='white')  # first histogram
plot( p2, col=rgb(1,0,0,1/4), xlim=c(-5,5), add=T)  # second
x<-rnorm(100000,mean=-0.02905539, sd=1.038987)
y<-rnorm(100000,mean=-0, sd=1)
hist(x,breaks=150,freq=FALSE,col.fill='white')
x<-rnorm(100000,mean=-0.02905539, sd=1.038987)
y<-rnorm(100000,mean=-0, sd=1)
hist(x,breaks=150,freq=FALSE,col.stroke='white')
x<-rnorm(100000,mean=-0.02905539, sd=1.038987)
y<-rnorm(100000,mean=-0, sd=1)
histogram(x,breaks=150,freq=FALSE,col.stroke='white')
x<-rnorm(100000,mean=-0.02905539, sd=1.038987)
y<-rnorm(100000,mean=-0, sd=1)
hs(x,breaks=150,freq=FALSE,col.stroke='white')
x<-rnorm(100000,mean=-0.02905539, sd=1.038987)
y<-rnorm(100000,mean=-0, sd=1)
hist(x,breaks=150,freq=FALSE,col.stroke='white')
x<-rnorm(100000,mean=-0.02905539, sd=1.038987)
y<-rnorm(100000,mean=-0, sd=1)
hist(x,breaks=150,freq=FALSE,col='white')
x<-rnorm(100000,mean=-0.02905539, sd=1.038987)
y<-rnorm(100000,mean=-0, sd=1)
hist(x,breaks=150,freq=FALSE,col='white',density = False)
x<-rnorm(100000,mean=-0.02905539, sd=1.038987)
y<-rnorm(100000,mean=-0, sd=1)
hist(x,breaks=150,freq=FALSE,col='white',density = Null)
x<-rnorm(100000,mean=-0.02905539, sd=1.038987)
y<-rnorm(100000,mean=-0, sd=1)
hist(x,breaks=150,freq=FALSE,col='white',density = NULL)
x<-rnorm(100000,mean=-0.02905539, sd=1.038987)
y<-rnorm(100000,mean=-0, sd=1)
hist(x,breaks=150,freq=FALSE,col='red',density = NULL)
x<-rnorm(100000,mean=-0.02905539, sd=1.038987)
y<-rnorm(100000,mean=-0, sd=1)
hist(x,breaks=150,freq=FALSE,col='red',border=NULL)
x<-rnorm(100000,mean=-0.02905539, sd=1.038987)
y<-rnorm(100000,mean=-0, sd=1)
hist(x,breaks=150,freq=FALSE,col='white',border=NULL)
x<-rnorm(100000,mean=-0.02905539, sd=1.038987)
y<-rnorm(100000,mean=-0, sd=1)
hist(x,breaks=150,freq=FALSE,col='white',border=NULL)
curve(rnorm(100000, mean=0, sd=1),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
x<-rnorm(100000,mean=-0.02905539, sd=1.038987)
y<-rnorm(100000,mean=-0, sd=1)
hist(x,breaks=150,freq=FALSE,col='white',border=NULL)
curve(dnorm(x, mean=0, sd=1),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
# PART generate data and Tn test it ----
#Because create 1000 (check article 3.1) data files for each cases will take more times
#this section is a first try to generate 1000 data set and create an histogram
#of the Test function. To verify the disribution
p <- 300                                #dimension vector (multiple of 3)
mu0 <- rep(0, p)
mu1 <- rep(0.25, p)
mu2 <- c(rep(0, p %/% 3), rep(0.25, p %/% 3), rep(-0.25, p %/% 3))
Sigma1 <- 'diag<-'(matrix(0.2, p, p), 1)
Sigma2 <- matrix(0 , nrow = p, ncol = p)
for (i in 1:p){
for (j in 1:p){
Sigma2[i, j] <- 0.8 ** abs(i - j)
}
}
D <- matrix(0 , nrow = p, ncol = p)
for (i in 1:p){
D[i, i] <- 2 + (p - i + 1) / p
}
R <- matrix(0 , nrow = p, ncol = p)
for (i in 1:p){
for (j in 1:p){
R[i, j] <- (-1) ** (i + j) * (0.2) ** (abs(i - j) ** (0.1))
}
}
Sigma3 <- D %*% R %*% D
tr <- function (m){
total_sum <- 0
if(is.matrix(m))
{
row_count <- nrow(m)
col_count <- ncol(m)
if(row_count == col_count)
{
total_sum <-sum(diag(m))
total_sum
}
else
{
message ('Matrix is not square')
}
}
else
{
message( 'Object is not a matrix')
}
}
HistoTest_Ex1 <- function(n, p, mu , Sigma, WhichMu, WhichSig){
dat <- c()
for (i in 1:1000){
if (i %% 50 == 0){
print(i)
}
Data_matrix <- matrix(0, nrow = n, ncol = p)
for (i in 1:n){
#set.seed(i)          #Set seed for reproducibility
Data_matrix[i,] <- t(mu + t(chol(Sigma)) %*% rnorm(p, 0, 1))
}
for (i in 1:n){
#matrix with the vector Zi. Each row is a vector of p components
Data_matrix[i,] <- Data_matrix[i,] / norm(Data_matrix[i,], type= '2')
}
Tn <- 0
for (i in 2:n){
for (j in 1:(i-1)){
Tn <- Tn + Data_matrix[i,] %*% Data_matrix[j,]
}
}
Z_star <- 0
for (i in 1:n){
Z_star <- Z_star + Data_matrix[i,]
}
Z_star <- Z_star / (n - 2)
Matrix_Zj_ZjT <- matrix(0, nrow = p, ncol = p)
for (i in 1:n){
Matrix_Zj_ZjT <- Matrix_Zj_ZjT + Data_matrix[i,] %*% t(Data_matrix[i,])
}
Tr_B <- -n/(n - 2)**2 + ((n-1)/(n*(n-2)**2))* tr(Matrix_Zj_ZjT %*% Matrix_Zj_ZjT) +
((1-2*n)/(n*(n-1))) * Z_star %*% Matrix_Zj_ZjT %*% Z_star +
(2/n) * norm(Z_star, type = '2')**2 + (((n-2)**2)/(n*(n-1))) * norm(Z_star, type = '2')**4
Tn_normalized <- Tn/((0.5*n*(n-1)*Tr_B)**0.5)
dat <- append(dat, Tn_normalized)
}
print(mean(dat))
print(sd(dat))
}
HistoTest_Ex1(20, 300, mu0, Sigma2,0,1)
x<-rnorm(100000,mean=-0.01232128, sd=1.007918)
y<-rnorm(100000,mean=-0, sd=1)
hist(x,breaks=150,freq=FALSE,col='white',border=NULL)
curve(dnorm(x, mean=0, sd=1),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
x<-rnorm(100000,mean=0.02276276, sd=0.5260284)
y<-rnorm(100000,mean=-0, sd=1)
hist(x,breaks=150,freq=FALSE,col='white',border=NULL)
curve(dnorm(x, mean=0, sd=1),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
